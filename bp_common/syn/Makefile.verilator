override TOOL := verilator

override LOG_DIR     := $(LOG_PATH)/$(TOOL)
override RESULTS_DIR := $(RESULTS_PATH)/$(TOOL)
override REPORT_DIR  := $(REPORT_PATH)/$(TOOL)
override TOUCH_DIR   := $(TOUCH_PATH)/$(TOOL)

## Tools
CC ?= $(GCC)
VV ?= $(VERILATOR)

TOP_MODULE ?= testbench

## Tool options
VV_OPTS  = --sc                 # Output in SystemC rather than C++
#VV_OPTS += --debug --gdbbt     # Debugs and produces stack trace
VV_OPTS += -O1
VV_OPTS += --top-module $(TOP_MODULE)
VV_OPTS += -f flist.vcs
VV_OPTS += config.vlt
VV_OPTS += -o simsc

LINT_OPTS   = --lint-only -Wall --Wno-unoptflat --top-module $(TOP_MODULE) -f flist.vcs config.vlt
BUILD_OPTS  = --Wno-fatal --Wno-lint --Wno-style --Wno-widthconcat --Wno-unoptflat --exe -CFLAGS -std=c++11 
BUILD_OPTS += -I$(BP_EXTERNAL_DIR)/share/verilator/include/vltstd/ 
BUILD_OPTS += -LDFLAGS "-L$(BP_EXTERNAL_DIR)/lib -lpthread -ldramsim -ldromajo_cosim -Wl,-rpath=$(BP_EXTERNAL_DIR)/lib"

VERILATOR_OPTIONS =

VERILATOR_PLUSARGS =

LINT_DIR  := $(RESULTS_DIR)/$(TB).$(CFG).$(TAG).lint
BUILD_DIR := $(RESULTS_DIR)/$(TB).$(CFG).$(TAG).build
SIM_DIR   := $(RESULTS_DIR)/$(TB).$(CFG).$(TAG).cov
SIM_DIR   := $(RESULTS_DIR)/$(TB).$(CFG).$(TAG).sim.$(SUITE).$(PROG)
$(TOUCH_DIR) $(RESULTS_DIR) $(LOG_DIR) $(REPORT_DIR) $(LINT_DIR) $(BUILD_DIR) $(SIM_DIR):
	mkdir -p $@

.PHONY: clean.sc lint.sc build.sc cov.sc

include $(TB_PATH)/$(TB)/Makefile.verilator

lint.sc: $(LINT_DIR)/lintsc
lint.sc: LINT_LOG    := $(LOG_DIR)/$(TB).$(CFG).lint.log
lint.sc: LINT_REPORT := $(REPORT_DIR)/$(TB).$(CFG).lint.rpt
lint.sc: LINT_ERROR  := $(REPORT_DIR)/$(TB).$(CFG).lint.err
$(LINT_COLLATERAL): | $(TOUCH_DIR) $(RESULTS_DIR) $(LOG_DIR) $(REPORT_DIR) $(LINT_DIR)
$(LINT_DIR)/lintsc: $(LINT_COLLATERAL)
	cd $(@D); $(VV) $(LINT_OPTS) $(HDL_PARAMS) $(HDL_DEFINES) |& tee $(LINT_LOG)
	-@grep -E "Exiting due to .* error\(s\)" -A 5 $(LINT_LOG) > $(LINT_ERROR)
	-@test -s $(LINT_ERROR) && echo "FAILED" >> $(LINT_REPORT) \
	|| { rm -f $(LINT_ERROR); echo "PASS" >> $(LINT_REPORT); }

verilate.sc: $(BUILD_DIR)/obj_dir
verilate.sc: VBUILD_LOG    := $(LOG_DIR)/$(TB).$(CFG).vbuild.log
verilate.sc: VBUILD_REPORT := $(REPORT_DIR)/$(TB).$(CFG).vbuild.rpt
verilate.sc: VBUILD_ERROR  := $(REPORT_DIR)/$(TB).$(CFG).vbuild.err
$(VBUILD_COLLATERAL): | $(TOUCH_DIR) $(RESULTS_DIR) $(LOG_DIR) $(REPORT_DIR) $(BUILD_DIR)
$(BUILD_DIR)/obj_dir: $(VBUILD_COLLATERAL)
	cd $(@D); \
		$(VV) $(VV_OPTS) $(BUILD_OPTS) $(HDL_PARAMS) $(HDL_DEFINES) | tee $(VBUILD_LOG)
	-@grep "Error" -A 5 $(VBUILD_LOG) > $(VBUILD_ERROR)
	-@tail -n 3 $(VBUILD_LOG) > $(VBUILD_REPORT)
	-@test -s $(VBUILD_ERROR) && echo "FAILED" >> $(VBUILD_REPORT) || rm $(VBUILD_ERROR)

verilate_dump.sc: VV_OPTS += --trace
verilate_dump.sc: VV_OPTS += --trace-structs
verilate_dump.sc: VV_OPTS += --trace-depth 15
verilate_dump.sc: verilate.sc

verilate_cov.sc: VV_OPTS += --coverage-line
verilate_cov.sc: VV_OPTS += --coverage-toggle
verilate_cov.sc: verilate.sc

build.sc: verilate.sc
build.sc: $(BUILD_DIR)/obj_dir/simsc
build.sc: CBUILD_LOG    := $(LOG_DIR)/$(TB).$(CFG).cbuild.log
build.sc: CBUILD_REPORT := $(LOG_DIR)/$(TB).$(CFG).cbuild.rpt
build.sc: CBUILD_ERROR  := $(LOG_DIR)/$(TB).$(CFG).cbuild.err
build.sc: verilate.sc
$(CBUILD_COLLATERAL): | $(TOUCH_DIR) $(RESULTS_DIR) $(LOG_DIR) $(REPORT_DIR) $(BUILD_DIR)
$(BUILD_DIR)/obj_dir/simsc: $(CBUILD_COLLATERAL)
	$(MAKE) -C $(@D) -f V$(TOP_MODULE).mk | tee $(CBUILD_LOG)
	-@grep "Error" -A 5 $(CBUILD_LOG) > $(CBUILD_ERROR)
	-@tail -n 2 $(CBUILD_LOG) > $(CBUILD_REPORT)
	-@test -s $(CBUILD_ERROR) && echo "FAILED" >> $(CBUILD_REPORT) || rm $(CBUILD_ERROR)

build_dump.sc: verilate_dump.sc
	$(MAKE) build.sc

build_cov.sc: verilate_cov.sc
	$(MAKE) build.sc

sim.sc: build.sc
sim.sc: $(SIM_DIR)/run_simsc
sim.sc: SIM_LOG    := $(LOG_DIR)/$(TB).$(CFG).sim.$(SUITE).$(PROG).log
sim.sc: SIM_REPORT := $(REPORT_DIR)/$(TB).$(CFG).sim.$(SUITE).$(PROG).rpt
sim.sc: SIM_ERROR  := $(REPORT_DIR)/$(TB).$(CFG).sim.$(SUITE).$(PROG).err
$(SIM_COLLATERAL): | $(TOUCH_DIR) $(RESULTS_DIR) $(LOG_DIR) $(REPORT_DIR) $(SIM_DIR)
$(SIM_DIR)/run_simsc: $(SIM_COLLATERAL)
	cd $(@D); ./simsc $(VERILATOR_OPTIONS) $(VERILATOR_PLUSARGS) | tee $(SIM_LOG)
	-@grep "PASS" $(SIM_LOG) || echo "FAILED" > $(SIM_ERROR)
	-@grep "STATS" -A 3 $(SIM_LOG) > $(SIM_REPORT)

cov.sc: $(RESULTS_DIR)/covsc
cov.sc: COV_LOG    := $(LOG_DIR)/$(TB).$(CFG).cov.log
cov.sc: COV_REPORT := $(REPORT_DIR)/$(TB).$(CFG).cov.rpt
cov.sc: COV_ERROR  := $(REPORT_DIR)/$(TB).$(CFG).cov.err
$(COV_COLLATERAL): | $(TOUCH_DIR) $(RESULTS_DIR) $(LOG_DIR) $(REPORT_DIR) $(SIM_DIR)
$(RESULTS_DIR)/covsc: | $(COV_COLLATERAL)
	cd $(@D); verilator_coverage */*.dat --rank --annotate $(COV_REPORT) | tee $(COV_LOG)

wave.sc: dirs.sc
	cd $(SIM_DIR); $(GTKWAVE) -f dump.vcd &

# TODO: Make compatible with multi-core
blood.sc: dirs.sc
	cd $(SIM_DIR); $(PYTHON) $(BLOODGRAPH) --input $(SIM_DIR)/stall_0.trace

clean.sc:
	@rm -rf results/verilator
	@rm -rf reports/verilator
	@rm -rf logs/verilator

