PROG_NAME := $(BENCHMARK)
SPEC_DIR = $(BP_TEST_DIR)/src/spec
BENCHMARK_DIR = $(SPEC_DIR)/spec2000/benchmarks/spec2000/CINT2000/$(BENCHMARK)

INIT_FILES = crt.o args.o
OBJECT_FILES := $(BENCHMARK_OBJS)
OBJECT_FILES += lfs.o $(INIT_FILES)

IN_FILES := $(BENCHMARK_INPS)

CLEAN_ITEMS = $(IN_FILES) $(OBJECT_FILES) lfs.c

vpath %.c $(BENCHMARK_DIR)/src.raw
vpath %.h $(BENCHMARK_DIR)/src.raw
vpath %.c ./rawlib
vpath %.S ./initlib
vpath %.c ./initlib

comma:= ,
empty:=
space:= $(empty) $(empty)

RISCV_GCC  = $(CROSS_COMPILE)gcc
RISCV_GCC_OPTS  = -O2 -mabi=lp64 -march=rv64ima -mcmodel=medany -mstrict-align -static -nostartfiles -I$(BP_TEST_DIR)/include
RISCV_GCC_OPTS += -Irawlib $(BENCHMARK_DEFS)
RISCV_GCC_OPTS += -D__init_argc=$(ARGC) -D__init_argv=\"$(subst $(space),\"$(comma)\",$(strip $(ARGV)))\"

RISCV_LINK = $(RISCV_GCC) -t -T $(SPEC_DIR)/riscv.ld
RISCV_LINK_OPTS = -nostartfiles -lperch -lm -L$(BP_TEST_DIR)/lib

MKLFS = dramfs_mklfs

all: lfs.c $(PROG_NAME).riscv

lfs.c: $(IN_FILES)
	$(MKLFS) $(LFS_BLOCK_SIZE) $(LFS_BLOCK_COUNT) $(IN_FILES) > $@

%.o: %.S
	$(RISCV_GCC) $(RISCV_GCC_OPTS) $(RISCV_GCC_EXTRA_OPTS) -c $< -o $@

%.o: %.c
	$(RISCV_GCC) $(RISCV_GCC_OPTS) $(RISCV_GCC_EXTRA_OPTS) -c $< -o $@

$(PROG_NAME).riscv: $(OBJECT_FILES)
	$(RISCV_LINK) $(OBJECT_FILES) -L. -o $@ $(RISCV_LINK_OPTS)

clean:
	rm -rf $(CLEAN_ITEMS) 
