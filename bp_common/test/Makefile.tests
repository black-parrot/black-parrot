TOP ?= $(shell git rev-parse --show-toplevel)

include $(TOP)/Makefile.common
include $(BP_TEST_DIR)/Makefile.linux

perch_dir       := $(BP_TEST_SRC_DIR)/perch
bootrom_dir     := $(BP_TEST_SRC_DIR)/bootrom
bp_tests_dir    := $(BP_TEST_SRC_DIR)/bp_tests
riscv_tests_dir := $(BP_TEST_SRC_DIR)/riscv-tests
beebs_dir       := $(BP_TEST_SRC_DIR)/beebs
coremark_dir    := $(BP_TEST_SRC_DIR)/coremark
spec_dir        := $(BP_TEST_SRC_DIR)/spec
riscvdv_dir     := $(BP_TEST_SRC_DIR)/riscv-dv
demos_dir       := $(BP_TEST_SRC_DIR)/demos

define submodule_test_template
$(1)_tag := $(addprefix $(1)., $(shell cd $(2); git rev-parse HEAD))
$(BP_TOUCH_DIR)/$$($(1)_tag):
	rm -rf $(BP_TOUCH_DIR)/$(1).*
	cd $(TOP); git submodule update --init --merge --recursive $$($(1)_dir)
	+$(MAKE) $(1)_build
	mkdir -p $(BP_TEST_MEM_DIR)/$(1)
	find $(2) -name "*.riscv" -exec cp {} $(BP_TEST_MEM_DIR)/$(1)/ \;
	touch $(BP_TOUCH_DIR)/$$($(1)_tag)
$(1): $(BP_TOUCH_DIR)/$$($(1)_tag)
$(1)_manual: $(BP_TEST_DIR)/lib/libperch.a
	+$(MAKE) $(1)_build
	mkdir -p $(BP_TEST_MEM_DIR)/$(1)
	find $(2) -name "*.riscv" -exec cp {} $(BP_TEST_MEM_DIR)/$(1)/ \;
endef

bp_tests_build:
	$(MAKE) -C $(bp_tests_dir) clean all

riscv_tests_build:
	cd $(riscv_tests_dir); ./configure --target=riscv64-unknown-elf-dramfs
	$(MAKE) -C $(riscv_tests_dir) clean all

beebs_build:
	cd $(beebs_dir); ./configure --host=riscv64 --with-chip=black-parrot \
		--includedir=$(TEST_DIR)/include --libdir=$(TEST_DIR)/lib
	$(MAKE) -C $(beebs_dir) clean all
	@# TODO: We need to change to output .riscv, but the beebs makefiles are a mess
	@find $(beebs_dir)/src -type f -executable -exec cp {} {}.riscv \;

coremark_build:
	$(MAKE) -C $(coremark_dir)/barebones

spec_build:
	$(MAKE) -C $(spec_dir)

riscvdv_build:
	$(MAKE) -C $(riscvdv_dir)

linux: linux_build
linux_build: $(fw_payload)
	mkdir -p $(BP_TEST_MEM_DIR)/linux
	cp $< $(BP_TEST_MEM_DIR)/linux/linux.riscv

perch: $(BP_TEST_DIR)/lib/libperch.a
$(BP_TEST_DIR)/lib/libperch.a:
	$(MAKE) -C $(perch_dir)
	mkdir -p $(BP_TEST_DIR)/lib
	mkdir -p $(BP_TEST_DIR)/include
	cp $(BP_TEST_DIR)/src/perch/libperch.a $(BP_TEST_DIR)/lib
	cp $(BP_TEST_DIR)/src/perch/*.h $(BP_TEST_DIR)/include

bootrom: $(bootrom_dir)/bootrom
%/bootrom:
	$(MAKE) -C $(bootrom_dir) $(@D)/bootrom.riscv

demos:
	$(MAKE) -C $(demos_dir)
	mkdir -p $(BP_TEST_MEM_DIR)/demos
	find $(demos_dir) -name "*.riscv" -exec cp {} $(BP_TEST_MEM_DIR)/demos/ \;

$(eval $(call submodule_test_template,bp_tests,$(bp_tests_dir)))
$(eval $(call submodule_test_template,riscv_tests,$(riscv_tests_dir)))
$(eval $(call submodule_test_template,beebs,$(beebs_dir)))
$(eval $(call submodule_test_template,coremark,$(coremark_dir)))
$(eval $(call submodule_test_template,spec,$(spec_dir)))
$(eval $(call submodule_test_template,riscvdv,$(riscvdv_dir)))

RISCV_OBJDUMP ?= $(CROSS_COMPILE)objdump -d -t
RISCV_OBJCOPY ?= $(CROSS_COMPILE)objcopy
MEM2NBF       ?= $(BP_COMMON_DIR)/software/py/nbf.py
DROMAJO       ?= dromajo
SED           ?= sed

%.mem: %.riscv
	$(RISCV_OBJCOPY) -O verilog $*.riscv $@
	$(SED) -i "s/@8/@0/g" $@

%.bin: %.riscv
	$(RISCV_OBJCOPY) -O binary $*.riscv $@

%.dump: %.riscv
	$(RISCV_OBJDUMP) $*.riscv > $@

