
# Top-level module
DESIGN_NAME :=bp_be_top

# Run director for DesignCompiler
DC_RUN_DIR :=run_dc

# Check if the design is synthesizable. This is not an actual synthesis run,
# but rather runs analysis and elaboration on the design without linking any
# specific process. This is significantly quicker than running a full synthesis
# run and doesn't require any design constraints. Instead, this let's RTL
# designers catch issues with the design such as non-synthesizable code. The
# wildcard in the target.

%.check.syn:
	$(eval include $(TB_PATH)/$*/Makefile.frag)
	mkdir -p $(DC_RUN_DIR)
	grep -v -e "^\#" $(CURDIR)/flist.vcs > $(DC_RUN_DIR)/flist.vcs
	cd $(DC_RUN_DIR) && $(DC_SHELL) -64bit -f $(BP_COMMON_DIR)/syn/tcl/dc_elab.tcl | tee -i $@.log
	@grep --color      "^Error"                               $(DC_RUN_DIR)/$@.log | tee    $(DC_RUN_DIR)/$@.err || true
	@grep --color      "Complex logic will not be considered" $(DC_RUN_DIR)/$@.log | tee -a $(DC_RUN_DIR)/$@.err || true
	@grep --color -B 3 "*** Presto compilation terminated"    $(DC_RUN_DIR)/$@.log | tee -a $(DC_RUN_DIR)/$@.err || true
	@grep --color      "unresolved references."               $(DC_RUN_DIR)/$@.log | tee -a $(DC_RUN_DIR)/$@.err || true
	@grep --color      "Cannot find the design"               $(DC_RUN_DIR)/$@.log | tee -a $(DC_RUN_DIR)/$@.err || true
	@grep --color      "undeclared symbol"                    $(DC_RUN_DIR)/$@.log | tee -a $(DC_RUN_DIR)/$@.err || true

# This target allows users to look up commands and message codes for
# DesignCompiler. If there is a message with a code (e.g. LINT-1) then you can
# replace the wildcard with the code (e.g. make LINT-1.lookup.syn) to query
# DesignCompiler for a detailed explaination of the message code. You can also
# use this for DesignCompiler commands and application variables.

%.lookup.syn:
	$(DC_SHELL) -64bit -x "set_app_var sh_command_log_file /dev/null; man $*; exit"

# Cleanup all files generated by DesignCompiler

clean.syn:
	rm -rf $(DC_RUN_DIR)

