
MISC_TESTS := \
  cache_hammer
MISC_TESTLIST := $(addprefix bp_tests@, $(MISC_TESTS))

RV64_P_ISA_TESTS := \
  rv64ui-p-add     \
  rv64ui-p-addi    \
  rv64ui-p-addiw   \
  rv64ui-p-addw    \
  rv64ui-p-and     \
  rv64ui-p-andi    \
  rv64ui-p-auipc   \
  rv64ui-p-beq     \
  rv64ui-p-bge     \
  rv64ui-p-bgeu    \
  rv64ui-p-blt     \
  rv64ui-p-bltu    \
  rv64ui-p-bne     \
  rv64ui-p-fence_i \
  rv64ui-p-jal     \
  rv64ui-p-jalr    \
  rv64ui-p-lb      \
  rv64ui-p-lbu     \
  rv64ui-p-lh      \
  rv64ui-p-lhu     \
  rv64ui-p-lw      \
  rv64ui-p-lwu     \
  rv64ui-p-ld      \
  rv64ui-p-lui     \
  rv64ui-p-or      \
  rv64ui-p-ori     \
  rv64ui-p-sb      \
  rv64ui-p-sh      \
  rv64ui-p-sw      \
  rv64ui-p-sd      \
  rv64ui-p-simple  \
  rv64ui-p-sll     \
  rv64ui-p-slli    \
  rv64ui-p-slliw   \
  rv64ui-p-sllw    \
  rv64ui-p-slt     \
  rv64ui-p-slti    \
  rv64ui-p-sltiu   \
  rv64ui-p-sltu    \
  rv64ui-p-sra     \
  rv64ui-p-srai    \
  rv64ui-p-sraiw   \
  rv64ui-p-sraw    \
  rv64ui-p-srl     \
  rv64ui-p-srli    \
  rv64ui-p-srliw   \
  rv64ui-p-srlw    \
  rv64ui-p-sub     \
  rv64ui-p-subw    \
  rv64ui-p-xor     \
  rv64ui-p-xori    \
                   \
  rv64ua-p-amoadd_d  \
  rv64ua-p-amoadd_w  \
  rv64ua-p-amoand_d  \
  rv64ua-p-amoand_w  \
  rv64ua-p-amomax_d  \
  rv64ua-p-amomax_w  \
  rv64ua-p-amomaxu_w \
  rv64ua-p-amomaxu_d \
  rv64ua-p-amomin_d  \
  rv64ua-p-amomin_w  \
  rv64ua-p-amominu_w \
  rv64ua-p-amominu_d \
  rv64ua-p-amoor_d   \
  rv64ua-p-amoor_w   \
  rv64ua-p-amoswap_d \
  rv64ua-p-amoswap_w \
  rv64ua-p-amoxor_d  \
  rv64ua-p-amoxor_w  \
  rv64ua-p-lrsc      \
                     \
  rv64um-p-mul       \
  rv64um-p-mulh      \
  rv64um-p-mulhsu    \
  rv64um-p-mulhu     \
  rv64um-p-mulw      \
  rv64um-p-div       \
  rv64um-p-divu      \
  rv64um-p-divuw     \
  rv64um-p-divw      \
  rv64um-p-rem       \
  rv64um-p-remu      \
  rv64um-p-remuw     \
  rv64um-p-remw      \
                     \
  rv64uf-p-fadd      \
  rv64uf-p-fclass    \
  rv64uf-p-fcmp      \
  rv64uf-p-fcvt      \
  rv64uf-p-fcvt_w    \
  rv64uf-p-fdiv      \
  rv64uf-p-fmadd     \
  rv64uf-p-fmin      \
  rv64uf-p-ldst      \
  rv64uf-p-move      \
  rv64uf-p-recoding  \
                     \
  rv64ud-p-fadd      \
  rv64ud-p-fclass    \
  rv64ud-p-fcmp      \
  rv64ud-p-fcvt      \
  rv64ud-p-fcvt_w    \
  rv64ud-p-fdiv      \
  rv64ud-p-fmadd     \
  rv64ud-p-fmin      \
  rv64ud-p-ldst      \
  rv64ud-p-move      \
  rv64ud-p-structural

RV64_P_ISA_TESTLIST := $(addprefix riscv_tests@, $(RV64_P_ISA_TESTS))

  #rv64ua-v-amominu_w
RV64_V_ISA_TESTS := \
  rv64ui-v-add     \
  rv64ui-v-addi    \
  rv64ui-v-addiw   \
  rv64ui-v-addw    \
  rv64ui-v-and     \
  rv64ui-v-andi    \
  rv64ui-v-auipc   \
  rv64ui-v-beq     \
  rv64ui-v-bge     \
  rv64ui-v-bgeu    \
  rv64ui-v-blt     \
  rv64ui-v-bltu    \
  rv64ui-v-bne     \
  rv64ui-v-jal     \
  rv64ui-v-jalr    \
  rv64ui-v-lb      \
  rv64ui-v-lbu     \
  rv64ui-v-lh      \
  rv64ui-v-lhu     \
  rv64ui-v-lw      \
  rv64ui-v-lwu     \
  rv64ui-v-ld      \
  rv64ui-v-lui     \
  rv64ui-v-or      \
  rv64ui-v-ori     \
  rv64ui-v-sb      \
  rv64ui-v-sh      \
  rv64ui-v-sw      \
  rv64ui-v-sd      \
  rv64ui-v-sll     \
  rv64ui-v-slli    \
  rv64ui-v-slliw   \
  rv64ui-v-sllw    \
  rv64ui-v-slt     \
  rv64ui-v-slti    \
  rv64ui-v-sltiu   \
  rv64ui-v-sltu    \
  rv64ui-v-sra     \
  rv64ui-v-srai    \
  rv64ui-v-sraiw   \
  rv64ui-v-sraw    \
  rv64ui-v-srl     \
  rv64ui-v-srli    \
  rv64ui-v-srliw   \
  rv64ui-v-srlw    \
  rv64ui-v-sub     \
  rv64ui-v-subw    \
  rv64ui-v-xor     \
  rv64ui-v-xori    \
  #rv64ua-v-amoadd_d  \
  rv64ua-v-amoadd_w  \
  rv64ua-v-amoand_d  \
  rv64ua-v-amoand_w  \
  rv64ua-v-amomax_d  \
  rv64ua-v-amomax_w  \
  rv64ua-v-amomaxu_w \
  rv64ua-v-amomaxu_d \
  rv64ua-v-amomin_d  \
  rv64ua-v-amomin_w  \
  rv64ua-v-amominu_d \
  rv64ua-v-amoor_d   \
  rv64ua-v-amoor_w   \
  rv64ua-v-amoswap_d \
  rv64ua-v-amoswap_w \
  rv64ua-v-amoxor_d  \
  rv64ua-v-amoxor_w  \
  rv64ua-v-lrsc

RV64_V_ISA_TESTLIST := $(addprefix riscv_tests@, $(RV64_V_ISA_TESTS))

RV64_PT_ISA_TESTS := \
  rv64ui-pt-add     \
  rv64ui-pt-addi    \
  rv64ui-pt-addiw   \
  rv64ui-pt-addw    \
  rv64ui-pt-and     \
  rv64ui-pt-andi    \
  rv64ui-pt-auipc   \
  rv64ui-pt-beq     \
  rv64ui-pt-bge     \
  rv64ui-pt-bgeu    \
  rv64ui-pt-blt     \
  rv64ui-pt-bltu    \
  rv64ui-pt-bne     \
  rv64ui-pt-jal     \
  rv64ui-pt-jalr    \
  rv64ui-pt-lb      \
  rv64ui-pt-lbu     \
  rv64ui-pt-lh      \
  rv64ui-pt-lhu     \
  rv64ui-pt-lw      \
  rv64ui-pt-lwu     \
  rv64ui-pt-ld      \
  rv64ui-pt-lui     \
  rv64ui-pt-or      \
  rv64ui-pt-ori     \
  rv64ui-pt-sb      \
  rv64ui-pt-sh      \
  rv64ui-pt-sw      \
  rv64ui-pt-sd      \
  rv64ui-pt-sll     \
  rv64ui-pt-slli    \
  rv64ui-pt-slliw   \
  rv64ui-pt-sllw    \
  rv64ui-pt-slt     \
  rv64ui-pt-slti    \
  rv64ui-pt-sltiu   \
  rv64ui-pt-sltu    \
  rv64ui-pt-sra     \
  rv64ui-pt-srai    \
  rv64ui-pt-sraiw   \
  rv64ui-pt-sraw    \
  rv64ui-pt-srl     \
  rv64ui-pt-srli    \
  rv64ui-pt-srliw   \
  rv64ui-pt-srlw    \
  rv64ui-pt-sub     \
  rv64ui-pt-subw    \
  rv64ui-pt-xor     \
  rv64ui-pt-xori    \
  #rv64ua-pt-amoadd_d  \
  rv64ua-pt-amoadd_w  \
  rv64ua-pt-amoand_d  \
  rv64ua-pt-amoand_w  \
  rv64ua-pt-amomax_d  \
  rv64ua-pt-amomax_w  \
  rv64ua-pt-amomaxu_w \
  rv64ua-pt-amomaxu_d \
  rv64ua-pt-amomin_d  \
  rv64ua-pt-amomin_w  \
  rv64ua-pt-amominu_w \
  rv64ua-pt-amominu_d \
  rv64ua-pt-amoor_d   \
  rv64ua-pt-amoor_w   \
  rv64ua-pt-amoswap_d \
  rv64ua-pt-amoswap_w \
  rv64ua-pt-amoxor_d  \
  rv64ua-pt-amoxor_w  \
  rv64ua-pt-lrsc

RV64_PT_ISA_TESTLIST := $(addprefix riscv_tests@, $(RV64_PT_ISA_TESTS))

  # TODO: Fails in spike
  #rv64ui-vt-slti
  # TODO: Renable once software fix
RV64_VT_ISA_TESTS := \
  #rv64ui-vt-add     \
  rv64ui-vt-addi    \
  rv64ui-vt-addiw   \
  rv64ui-vt-addw    \
  rv64ui-vt-and     \
  rv64ui-vt-andi    \
  rv64ui-vt-auipc   \
  rv64ui-vt-beq     \
  rv64ui-vt-bge     \
  rv64ui-vt-bgeu    \
  rv64ui-vt-blt     \
  rv64ui-vt-bltu    \
  rv64ui-vt-bne     \
  rv64ui-vt-jal     \
  rv64ui-vt-jalr    \
  rv64ui-vt-lb      \
  rv64ui-vt-lbu     \
  rv64ui-vt-lh      \
  rv64ui-vt-lhu     \
  rv64ui-vt-lw      \
  rv64ui-vt-lwu     \
  rv64ui-vt-ld      \
  rv64ui-vt-lui     \
  rv64ui-vt-or      \
  rv64ui-vt-ori     \
  rv64ui-vt-sb      \
  rv64ui-vt-sh      \
  rv64ui-vt-sw      \
  rv64ui-vt-sd      \
  rv64ui-vt-sll     \
  rv64ui-vt-slli    \
  rv64ui-vt-slliw   \
  rv64ui-vt-sllw    \
  rv64ui-vt-slt     \
  rv64ui-vt-sltiu   \
  rv64ui-vt-sltu    \
  rv64ui-vt-sra     \
  rv64ui-vt-srai    \
  rv64ui-vt-sraiw   \
  rv64ui-vt-sraw    \
  rv64ui-vt-srl     \
  rv64ui-vt-srli    \
  rv64ui-vt-srliw   \
  rv64ui-vt-srlw    \
  rv64ui-vt-sub     \
  rv64ui-vt-subw    \
  rv64ui-vt-xor     \
  rv64ui-vt-xori    \
  #rv64ua-vt-amoadd_d  \
  rv64ua-vt-amoadd_w  \
  rv64ua-vt-amoand_d  \
  rv64ua-vt-amoand_w  \
  rv64ua-vt-amomax_d  \
  rv64ua-vt-amomax_w  \
  rv64ua-vt-amomaxu_w \
  rv64ua-vt-amomaxu_d \
  rv64ua-vt-amomin_d  \
  rv64ua-vt-amomin_w  \
  rv64ua-vt-amominu_w \
  rv64ua-vt-amominu_d \
  rv64ua-vt-amoor_d   \
  rv64ua-vt-amoor_w   \
  rv64ua-vt-amoswap_d \
  rv64ua-vt-amoswap_w \
  rv64ua-vt-amoxor_d  \
  rv64ua-vt-amoxor_w  \
  rv64ua-vt-lrsc

RV64_VT_ISA_TESTLIST := $(addprefix riscv_tests@, $(RV64_VT_ISA_TESTS))

RV64_BENCHMARK_TESTS := \
  median   \
  multiply \
  qsort    \
  rsort    \
  towers   \
  vvadd    \
  dhrystone

RV64_BENCHMARK_TESTLIST := $(addprefix riscv_tests@, $(RV64_BENCHMARK_TESTS))

RISCV_TESTLIST := \
	$(RV64_P_ISA_TESTLIST) \
	$(RV64_V_ISA_TESTLIST) \
	$(RV64_PT_ISA_TESTLIST)\
   	$(RV64_VT_ISA_TESTLIST)\
   	$(RV64_BENCHMARK_TESTLIST)

COREMARK_TESTS := coremark

COREMARK_TESTLIST := $(addprefix coremark@, $(COREMARK_TESTS))

BEEBS_TESTS := \
  aha-compress \
  aha-mont64 \
  bs \
  bubblesort \
  cnt \
  compress \
  cover \
  crc \
  ctl-stack \
  ctl-vector \
  cubic \
  dijkstra \
  duff \
  edn \
  expint \
  fac \
  fasta \
  fdct \
  fibcall \
  fir \
  frac \
  huffbench \
  insertsort \
  janne_complex \
  jfdctint \
  lcdnum \
  levenshtein \
  ludcmp \
  matmult-float \
  matmult-int \
  mergesort \
  miniz \
  minver \
  nbody \
  ndes \
  nettle-aes \
  nettle-arcfour \
  nettle-cast128 \
  nettle-des \
  nettle-md5 \
  nettle-sha256 \
  newlib-exp \
  newlib-log \
  newlib-mod \
  newlib-sqrt \
  ns \
  nsichneu \
  picojpeg \
  prime \
  qrduino \
  qurt \
  recursion \
  select \
  sglib-arraybinsearch \
  sglib-arrayheapsort \
  sglib-arrayquicksort \
  sglib-dllist \
  sglib-hashtable \
  sglib-listinsertsort \
  sglib-listsort \
  sglib-queue \
  sglib-rbtree \
  slre \
  sqrt \
  statemate \
  stb_perlin \
  stringsearch1 \
  strstr \
  tarai \
  template \
  trio-snprintf \
  trio-sscanf \
  ud \
  wikisort \
  qsort

# COSIM fail 0.0->-0.0
#  whetstone \

BEEBS_TESTLIST := $(addprefix beebs@, $(BEEBS_TESTS))

MC_TESTS := \
  mc_sanity_1 \
  mc_sanity_2 \
  mc_sanity_4 \
  mc_sanity_8 \
  mc_sanity_16 \
  mc_rand_walk_1 \
  mc_rand_walk_2 \
  mc_rand_walk_4 \
  mc_rand_walk_8 \
  mc_rand_walk_16 \
  mc_work_share_sort_1 \
  mc_work_share_sort_2 \
  mc_work_share_sort_4 \
  mc_work_share_sort_8 \
  mc_work_share_sort_16

MC_TESTLIST := $(addprefix bp_tests@, $(MC_TESTS))

RISCVDV_TESTS := \
  riscv_arithmetic_basic_test     \
  riscv_full_interrupt_test       \
  riscv_illegal_instr_test        \
  riscv_loop_test                 \
  riscv_mmu_stress_test           \
  riscv_no_fence_test             \
  riscv_privileged_mode_rand_test \
  riscv_rand_instr_test           \
  riscv_rand_jump_test            \
  riscv_sfence_exception_test

# TODO: Clean this up with a better generator
RISCVDV_TESTLIST  = $(addprefix riscvdv@, $(addsuffix  _0, $(RISCVDV_TESTS)))
RISCVDV_TESTLIST += $(addprefix riscvdv@, $(addsuffix  _1, $(RISCVDV_TESTS)))
RISCVDV_TESTLIST += $(addprefix riscvdv@, $(addsuffix  _2, $(RISCVDV_TESTS)))
RISCVDV_TESTLIST += $(addprefix riscvdv@, $(addsuffix  _3, $(RISCVDV_TESTS)))
RISCVDV_TESTLIST += $(addprefix riscvdv@, $(addsuffix  _4, $(RISCVDV_TESTS)))
RISCVDV_TESTLIST += $(addprefix riscvdv@, $(addsuffix  _5, $(RISCVDV_TESTS)))
RISCVDV_TESTLIST += $(addprefix riscvdv@, $(addsuffix  _6, $(RISCVDV_TESTS)))
RISCVDV_TESTLIST += $(addprefix riscvdv@, $(addsuffix  _7, $(RISCVDV_TESTS)))
RISCVDV_TESTLIST += $(addprefix riscvdv@, $(addsuffix  _8, $(RISCVDV_TESTS)))
RISCVDV_TESTLIST += $(addprefix riscvdv@, $(addsuffix  _9, $(RISCVDV_TESTS)))
RISCVDV_TESTLIST += $(addprefix riscvdv@, $(addsuffix _10, $(RISCVDV_TESTS)))
RISCVDV_TESTLIST += $(addprefix riscvdv@, $(addsuffix _11, $(RISCVDV_TESTS)))
RISCVDV_TESTLIST += $(addprefix riscvdv@, $(addsuffix _12, $(RISCVDV_TESTS)))
RISCVDV_TESTLIST += $(addprefix riscvdv@, $(addsuffix _13, $(RISCVDV_TESTS)))
RISCVDV_TESTLIST += $(addprefix riscvdv@, $(addsuffix _14, $(RISCVDV_TESTS)))
RISCVDV_TESTLIST += $(addprefix riscvdv@, $(addsuffix _15, $(RISCVDV_TESTS)))
RISCVDV_TESTLIST += $(addprefix riscvdv@, $(addsuffix _16, $(RISCVDV_TESTS)))
RISCVDV_TESTLIST += $(addprefix riscvdv@, $(addsuffix _17, $(RISCVDV_TESTS)))
RISCVDV_TESTLIST += $(addprefix riscvdv@, $(addsuffix _18, $(RISCVDV_TESTS)))
RISCVDV_TESTLIST += $(addprefix riscvdv@, $(addsuffix _19, $(RISCVDV_TESTS)))

SPEC_TESTS := \
  177.mesa \
  188.ammp \
  183.equake \
  175.vpr \
  181.mcf \
  164.gzip \
  186.crafty \
  256.bzip2 \
  197.parser

SPEC_TESTLIST := $(addprefix spec@, $(SPEC_TESTS))

BASELINE_TESTLIST := \
  bp_tests@hello_world \
  beebs@bs \
  beebs@dijkstra \
  beebs@fibcall \
  beebs@frac \
  riscv_tests@median \
  riscv_tests@rv64ui-p-blt \
  beebs@sglib-arraybinsearch \
  riscv_tests@towers \
  riscv_tests@vvadd

TESTLIST ?=
run_testlist.%:
	$(MAKE) -j1 build.$*
	$(MAKE) $(addsuffix @$*, $(addprefix run_test@, $($(TESTLIST))))

# For example: run_test@beebs@frac@v
run_test@%:
	$(eval override SUITE := $(word 1,$(subst @,  ,$*)))
	$(eval override PROG  := $(word 2,$(subst @,  ,$*)))
	$(eval override TS    := $(word 3,$(subst @,  ,$*)))
	$(MAKE) sim.$(TS) SUITE=$(SUITE) PROG=$(PROG)

dromajo_dump:
	$(DROMAJO) $(BP_TEST_MEM_DIR)/$(SUITE)/$(PROG).riscv --host $(if $(AMOEN),--enable_amo) --ncpus=$(NCPUS) \
		--checkpoint_period=$(SAMPLE_INSTR_P) --save=dromajo --memory_size=$(SAMPLE_MEMSIZE)

# Run an entire benchmark in parallel
# Important parameters:
#   SAMPLE_INSTR_P  - instructions per sample
#   SAMPLE_WARMUP_P - instructions to run for warmup, without statistics
#   SAMPLE_MEMSIZE  - RAM size of the sample (affects simulation startup time)
run_psample.%: dromajo_dump
	$(eval CHECKPOINTS := $(subst .mainram,,$(subst dromajo.,,$(shell ls dromajo.*.mainram))))
	rm dromajo.*
	$(MAKE) $(addsuffix @$*, $(addprefix run_sample@, $(CHECKPOINTS)))

# Special case 0, because we won't drop a checkpoint for it
run_sample@0%:
	$(eval override TS := $(word 1,$(subst @,  ,$*)))
	$(MAKE) -j1 build.$(TS) CHECKPOINT_P=0 NBF_CONFIG_P=1 TAG=$(SAMPLE_START_P).$(SAMPLE_WARMUP_P).$(SAMPLE_INSTR_P)
	$(MAKE) sim.$(TS) TAG=$(SAMPLE_START_P).$(SAMPLE_WARMUP_P).$(SAMPLE_INSTR_P)

# For example: run_sample@bp_tests@hello_world@60
run_sample@%:
	$(eval override SAMPLE_START_P  := $(word 1,$(subst @,  ,$*)))
	$(eval override TS              := $(word 2,$(subst @,  ,$*)))
	$(MAKE) -j1 build.$(TS) CHECKPOINT_P=1 NBF_CONFIG_P=1 TAG=$(SAMPLE_START_P).$(SAMPLE_WARMUP_P).$(SAMPLE_INSTR_P)
	$(MAKE) sim_sample.$(TS) TAG=$(SAMPLE_START_P).$(SAMPLE_WARMUP_P).$(SAMPLE_INSTR_P)

## Aliases
riscv_regress.%:
	$(MAKE) run_testlist.$* TESTLIST=RISCV_TESTLIST
beebs_regress.%:
	$(MAKE) run_testlist.$* TESTLIST=BEEBS_TESTLIST
