$(LINT_DIR)/testbench.sv $(LINT_DIR)/wrapper.sv $(LINT_DIR)/test_bp.cpp:
	@sed "s/BP_CFG_FLOWVAR/$(CFG)/g" $(TB_PATH)/$(TB)/$(@F) > $@

$(LINT_DIR)/flist.vcs:
	@grep -v -e "^\#" $(SYN_PATH)/flist.vcs          > $@
	@grep -v -e "^\#" $(TB_PATH)/$(TB)/flist.vcs    >> $@
	@echo wrapper.sv                                >> $@
	@echo testbench.sv                              >> $@
	@echo test_bp.cpp                               >> $@

$(LINT_DIR)/config.vlt:
	cat $(SYN_PATH)/lint_settings.verilator | envsubst > $@

LINT_COLLATERAL  = $(addprefix $(LINT_DIR)/, config.vlt flist.vcs wrapper.sv testbench.sv test_bp.cpp)

$(BUILD_DIR)/testbench.sv $(BUILD_DIR)/wrapper.sv $(BUILD_DIR)/test_bp.cpp:
	@sed "s/BP_CFG_FLOWVAR/$(CFG)/g" $(TB_PATH)/$(TB)/$(@F) > $@

$(BUILD_DIR)/flist.vcs:
	@grep -v -e "^\#" $(SYN_PATH)/flist.vcs          > $@
	@grep -v -e "^\#" $(TB_PATH)/$(TB)/flist.vcs    >> $@
	@echo wrapper.sv                                >> $@
	@echo testbench.sv                              >> $@
	@echo test_bp.cpp                               >> $@

$(BUILD_DIR)/config.vlt:
	cat $(SYN_PATH)/lint_settings.verilator | envsubst > $@

VBUILD_COLLATERAL = $(addprefix $(BUILD_DIR)/, config.vlt flist.vcs wrapper.sv testbench.sv test_bp.cpp)

$(SIM_DIR)/simsc: $(BUILD_DIR)/obj_dir
	@ln -nsf $</simsc $@

$(SIM_DIR)/prog.riscv: $(BP_SDK_PROG_DIR)/$(SUITE)/$(PROG).riscv
	cp $^ $@

$(SIM_DIR)/prog.elf: $(BP_SDK_PROG_DIR)/$(SUITE)/$(PROG).riscv
	cp $^ $@

$(SIM_DIR)/cce_ucode.mem: $(BP_SDK_UCODE_DIR)/$(CCE_MEM)
	cp $< $@

NBF_INPUTS ?= --ncpus=$(NCPUS) --ucode=cce_ucode.mem
ifeq ($(PRELOAD_MEM_P), 0)
NBF_INPUTS += --mem=prog.mem --skip_zeros
endif
ifeq ($(NBF_CONFIG_P), 1)
NBF_INPUTS += --config
endif
NBF_INPUTS += --addr_width=$(PADDR_WIDTH)

$(SIM_DIR)/prog.nbf: $(SIM_DIR)/cce_ucode.mem $(SIM_DIR)/prog.mem
	cd $(@D); python $(MEM2NBF) $(NBF_INPUTS) > $@

$(SIM_DIR)/bootrom.riscv: $(BP_SDK_PROG_DIR)/bootrom/bootrom.riscv
	cp $< $@

$(SIM_DIR)/bootrom.mem: $(SIM_DIR)/bootrom.riscv
	$(RISCV_OBJCOPY) -O verilog --reverse-bytes=8 --verilog-data-width=8 $< $@

SIM_COLLATERAL  = $(addprefix $(SIM_DIR)/, simsc)
SIM_COLLATERAL += $(addprefix $(SIM_DIR)/, prog.riscv prog.elf prog.mem prog.nbf prog.dump)
SIM_COLLATERAL += $(addprefix $(SIM_DIR)/, cce_ucode.mem)
SIM_COLLATERAL += $(addprefix $(SIM_DIR)/, bootrom.riscv bootrom.mem bootrom.dump)

sim_sample.sc: $(SIM_DIR)/run_samplesc
$(SIM_DIR)/run_samplesc: $(filter-out $(addprefix $(SIM_DIR)/,bootrom.%),$(SIM_COLLATERAL))
	cd $(@D); \
		$(DROMAJO) $(@D)/prog.riscv --host $(if $(AMOEN),--enable_amo) --ncpus=$(NCPUS) --maxinsn=$(SAMPLE_START_P) --save=dromajo --memory_size=$(SAMPLE_MEMSIZE)
	mv $(@D)/dromajo.mainram $(@D)/prog.mainram
	mv $(@D)/dromajo.bootram $(@D)/prog.bootram
	$(RISCV_OBJCOPY) --change-addresses 0x80000000 -I binary -O elf64-littleriscv -B riscv \
		$(@D)/prog.mainram $(@D)/prog.riscv
	$(RISCV_OBJCOPY) -I binary -O elf64-littleriscv -B riscv $(@D)/prog.bootram $(@D)/bootrom.riscv
	$(MAKE) sim.sc

tire_kick: $(SIM_DIR)/tire_kick
$(SIM_DIR)/tire_kick: $(TOUCH_DIR) $(RESULTS_DIR) $(LOG_DIR) $(REPORT_DIR) $(SIM_DIR)
	$(MAKE) build.sc
	sed "s/@8/@0/g" $(TB_PATH)/$(TB)/hello_world.mem > $(@D)/prog.mem
	cp $(TB_PATH)/$(TB)/hello_world.dump $(@D)/prog.dump
	## Stub out cce_ucode and bootrom since they're unused by this example
	touch $(@D)/cce_ucode.mem
	touch $(@D)/bootrom.mem
	$(MAKE) sim.sc

