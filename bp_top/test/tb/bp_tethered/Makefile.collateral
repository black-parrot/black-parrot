
ifeq ($(SIM),1)
%/flist.vcs:
	$(GREP) -v -e "^\#" $(SYN_PATH)/flist.vcs          > $@
	$(ECHO) wrapper.sv                                >> $@
	$(GREP) -v -e "^\#" $(TB_PATH)/$(TB)/flist.vcs    >> $@
	$(ECHO) testbench.sv                              >> $@
	$(ECHO) bsg_tag_boot_rom.v                        >> $@
	$(ECHO) "$(BP_ME_DIR)/test/common/bp_ddr.sv"      >> $@
	$(ECHO) "$(BASEJUMP_STL_DIR)/bsg_test/bsg_nonsynth_reset_gen.sv" >> $@
	$(ECHO) "$(BASEJUMP_STL_DIR)/bsg_test/bsg_nonsynth_clock_gen.sv" >> $@
	$(ECHO) "$(BASEJUMP_STL_DIR)/bsg_clk_gen/bsg_dly_line.sv"        >> $@
	$(ECHO) "$(BASEJUMP_STL_DIR)/bsg_dmc/bsg_dmc_clk_rst_gen.sv"     >> $@
	$(ECHO) "$(BASEJUMP_STL_DIR)/testing/bsg_dmc/lpddr_verilog_model/mobile_ddr.sv" >> $@
else
%/flist.vcs:
	$(GREP) -v -e "^\#" $(SYN_PATH)/flist.vcs          > $@
	$(ECHO) wrapper.sv                                >> $@
endif

%/wrapper.sv: $(TB_PATH)/$(TB)/wrapper.sv
	if [ "$(SIM_SYNTH_VIVADO_P)" = "1" ]; then \
		$(CP) $(SYN_PATH)/results/vivado/bp_tethered.$(CFG).$(TAG).build/wrapper_synth.sv $@; \
	elif [ "$(SIM_SYNTH_YOSYS_P)" = "1" ]; then \
		$(CP) $(SYN_PATH)/results/yosys/bp_tethered.$(CFG).$(TAG).synth/wrapper.synth.v $@; \
	else \
		$(CP) $< $@; \
	fi
	$(SED) -i "s/BP_CFG_FLOWVAR/$(CFG)/g" $@
	$(SED) -i 's/BP_DRAM_FLOWVAR/"$(DRAM)"/g' $@

%/testbench.sv: $(TB_PATH)/$(TB)/testbench.sv
	$(CP) $< $@
	$(SED) -i "s/BP_CFG_FLOWVAR/$(CFG)/g" $@
	$(SED) -i 's/BP_DRAM_FLOWVAR/"$(DRAM)"/g' $@

%/bsg_tag_boot_rom.v: $(TB_PATH)/$(TB)/bsg_tag_boot.tr
	$(PYTHON2) $(BASEJUMP_STL_DIR)/bsg_mem/bsg_ascii_to_rom.py $< bsg_tag_boot_rom > $@

%/bootrom.riscv: $(BP_SDK_PROG_DIR)/bootrom/bootrom.riscv
	$(CP) $< $@

%/bootrom.mem: %/bootrom.riscv
	$(RISCV_OBJCOPY) -O verilog $< $@
	$(SED) -i "s/@0011/@0000/g" $@

%/bootrom.bin: %/bootrom.riscv
	$(RISCV_OBJCOPY) -O binary $< $@

%/bootrom.dump: %/bootrom.riscv
	$(RISCV_OBJDUMP) $< > $@

%/prog.riscv: $(BP_SDK_PROG_DIR)/$(SUITE)/$(PROG).riscv
	$(CP) $^ $@

%/prog.elf: %/prog.riscv
	$(CP) $^ $@

%/prog.mem: %/prog.riscv
	$(RISCV_OBJCOPY) -O verilog $< $@
	$(SED) -i "s/@8/@0/g" $@

%/prog.bin: %/prog.riscv
	$(RISCV_OBJCOPY) -O binary $< $@

%/prog.dump: %/prog.riscv
	$(RISCV_OBJDUMP) $< > $@

MEM2NBF ?= $(BP_COMMON_DIR)/software/py/nbf.py
CCE_UCODE_FILE ?= $(BP_SDK_UCODE_DIR)/$(CCE_MEM)
NBF_INPUTS ?= --ncpus=$(NCPUS)
ifeq ($(NBF_CONFIG_P),1)
NBF_INPUTS += --config
NBF_INPUTS += --boot_pc=0x80000000
ifeq ($(UCODE),1)
NBF_INPUTS += --ucode=cce_ucode.mem
endif
else
NBF_INPUTS += --boot_pc=0x110000
NBF_INPUTS += --debug
endif
ifeq ($(PRELOAD_MEM_P),0)
NBF_INPUTS += --mem=prog.mem --mem_size=$(NBF_MEM_SIZE)
ifeq ($(NBF_SKIP_ZEROS),1)
NBF_INPUTS += --skip_zeros
endif
endif
%/cce_ucode.mem: $(CCE_UCODE_FILE)
	$(CP) $< $@

ifeq ($(UCODE),1)
%/prog.nbf: %/prog.mem %/cce_ucode.mem
else
%/prog.nbf: %/prog.mem
endif
	cd $(@D); $(PYTHON) $(MEM2NBF) $(NBF_INPUTS) > $@
	echo "$(PYTHON) $(MEM2NBF) $(NBF_INPUTS)"

sigcheck: $(SIM_DIR)/run_sigcheck
sigcheck: SIGCHECK_LOG    := $(LOG_DIR)/$(TB).$(CFG).$(TAG).sigcheck.$(SUITE).$(PROG).log
sigcheck: SIGCHECK_REPORT := $(REPORT_DIR)/$(TB).$(CFG).$(TAG).sigcheck.$(SUITE).$(PROG).rpt
sigcheck: SIGCHECK_ERROR  := $(REPORT_DIR)/$(TB).$(CFG).$(TAG).sigcheck.$(SUITE).$(PROG).err
$(SIM_DIR)/run_sigcheck:
	-$(DIFF) <($(TAIL) -n +9 $(@D)/DUT-blackparrot.signature | head -n -0) <($(TAIL) -n +9 $(BP_SDK_PROG_DIR)/$(SUITE)/$(PROG).signature | head -n -2) > $(SIGCHECK_LOG)
	$(ECHO) "Mismatches: " > $(SIGCHECK_REPORT)
	$(WCOUNT) < $(SIGCHECK_LOG) >> $(SIGCHECK_REPORT)
	$(GREP) [1-9] $(SIGCHECK_REPORT) && $(ECHO) "FAILED" > $(SIGCHECK_ERROR) || true
	$(WCOUNT) < $(@D)/DUT-blackparrot.signature >> $(SIGCHECK_REPORT)
	$(ECHO) "------" >> $(SIGCHECK_REPORT)
	$(WCOUNT) < $(BP_SDK_PROG_DIR)/$(SUITE)/$(PROG).signature >> $(SIGCHECK_REPORT)

# TODO: Make compatible with multi-core
BLOODGRAPH ?= $(BP_COMMON_DIR)/software/py/blood_graph.py --generate --generate-key
blood: $(SIM_DIR)/blood
$(SIM_DIR)/blood: $(SIM_DIR)/stall_0.trace
	$(CD) $(@D); $(PYTHON) $(BLOODGRAPH) --trace $<

