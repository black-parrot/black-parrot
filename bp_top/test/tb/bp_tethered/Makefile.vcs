VCS_TIMEOUT = 1000ms

$(LINT_DIR)/testbench.v $(LINT_DIR)/wrapper.v $(LINT_DIR)/test_bp.v:
	@sed "s/BP_CFG_FLOWVAR/$(CFG)/g" $(TB_PATH)/$(TB)/$(@F) > $@

$(LINT_DIR)/flist.vcs:
	@grep -v -e "^\#" $(SYN_PATH)/flist.vcs       > $@ 
	@grep -v -e "^\#" $(TB_PATH)/$(TB)/flist.vcs >> $@ 
	@echo wrapper.v                              >> $@ 
	@echo testbench.v                            >> $@ 
	@echo test_bp.v                              >> $@ 
	@echo "$(BASEJUMP_STL_DIR)/bsg_test/bsg_nonsynth_reset_gen.v" >> $@
	@echo "$(BASEJUMP_STL_DIR)/bsg_test/bsg_nonsynth_clock_gen.v" >> $@

LINT_COLLATERAL = $(addprefix $(LINT_DIR)/, flist.vcs wrapper.v testbench.v test_bp.v)

$(BUILD_DIR)/testbench.v $(BUILD_DIR)/wrapper.v $(BUILD_DIR)/test_bp.v:
	@sed "s/BP_CFG_FLOWVAR/$(CFG)/g" $(TB_PATH)/$(TB)/$(@F) > $@

$(BUILD_DIR)/flist.vcs:
	@grep -v -e "^\#" $(SYN_PATH)/flist.vcs       > $@ 
	@grep -v -e "^\#" $(TB_PATH)/$(TB)/flist.vcs >> $@ 
	@echo wrapper.v                              >> $@ 
	@echo testbench.v                            >> $@ 
	@echo test_bp.v                              >> $@ 
	@echo "$(BASEJUMP_STL_DIR)/bsg_test/bsg_nonsynth_reset_gen.v" >> $@
	@echo "$(BASEJUMP_STL_DIR)/bsg_test/bsg_nonsynth_clock_gen.v" >> $@

BUILD_COLLATERAL = $(addprefix $(BUILD_DIR)/, flist.vcs wrapper.v testbench.v test_bp.v)

$(SIM_DIR)/simv $(SIM_DIR)/simv.daidir: $(BUILD_DIR)/simv $(BUILD_DIR)/simv.daidir
	@ln -nsf $(<D)/$(@F) $@

$(SIM_DIR)/prog.riscv: $(BP_TEST_MEM_DIR)/$(SUITE)/$(PROG).riscv
	cp $^ $@

$(SIM_DIR)/prog.elf: $(BP_TEST_MEM_DIR)/$(SUITE)/$(PROG).riscv
	cp $^ $@

$(SIM_DIR)/cce_ucode.mem: $(CCE_MEM_PATH)/$(CCE_MEM)
	@cp $^ $@

OVERRIDE_BOOTROM ?= 0
$(SIM_DIR)/bootrom.riscv: bootrom
	cp $(BP_TEST_DIR)/src/bootrom/bootrom.riscv $@

$(SIM_DIR)/bootrom.mem: $(SIM_DIR)/bootrom.riscv
	$(RISCV_OBJCOPY) -O verilog --reverse-bytes=8 --verilog-data-width=8 $< $@

NBF_INPUTS ?= --ncpus=$(NCPUS) --ucode=cce_ucode.mem
ifeq ($(PRELOAD_MEM_P), 0)
NBF_INPUTS += --mem=prog.mem --skip_zeros
endif

$(SIM_DIR)/prog.nbf: $(SIM_DIR)/cce_ucode.mem $(SIM_DIR)/prog.mem
	cd $(@D); python $(MEM2NBF) $(NBF_INPUTS) > $@

SIM_COLLATERAL  = $(addprefix $(SIM_DIR)/, simv simv.daidir)
SIM_COLLATERAL += $(addprefix $(SIM_DIR)/, prog.riscv prog.elf prog.mem prog.nbf prog.dump)
SIM_COLLATERAL += $(addprefix $(SIM_DIR)/, cce_ucode.mem)
SIM_COLLATERAL += $(addprefix $(SIM_DIR)/, bootrom.riscv bootrom.mem bootrom.dump)

SAMPLE_COLLATERAL  = $(addprefix $(SIM_DIR)/, simv simv.daidir)
SAMPLE_COLLATERAL += $(addprefix $(SIM_DIR)/, prog.riscv prog.elf prog.dump)
SAMPLE_COLLATERAL += $(addprefix $(SIM_DIR)/, cce_ucode.mem)

sim_sample.v: build.v
sim_sample.v: $(SIM_DIR)/run_samplev
sim_sample.v: SIM_LOG    := $(LOG_DIR)/$(TB).$(CFG).$(TAG).sim.$(SUITE).$(PROG).log
sim_sample.v: SIM_REPORT := $(REPORT_DIR)/$(TB).$(CFG).$(TAG).sim.$(SUITE).$(PROG).rpt
sim_sample.v: SIM_ERROR  := $(REPORT_DIR)/$(TB).$(CFG).$(TAG).sim.$(SUITE).$(PROG).err
$(SIM_DIR)/run_samplev: $(SAMPLE_COLLATERAL)
	cd $(@D); \
		$(DROMAJO) $(@D)/prog.riscv --host --ncpus=$(NCPUS) --maxinsn=$(SAMPLE_START_P) --save=dromajo --memory_size=$(SAMPLE_MEMSIZE)
	mv $(@D)/dromajo.*.mainram $(@D)/prog.mainram
	mv $(@D)/dromajo.*.bootram $(@D)/prog.bootram
	mv $(@D)/dromajo.*.bp_regs $(@D)/prog.bp_regs
	$(RISCV_OBJCOPY) --change-addresses 0x80000000 -I binary -O elf64-littleriscv -B riscv \
		$(@D)/prog.mainram $(@D)/prog.riscv
	$(RISCV_OBJCOPY) -O verilog $(@D)/prog.riscv $(@D)/prog.mem
	$(SED) -i "s/@8/@0/g" $(@D)/prog.mem
	$(RISCV_OBJCOPY) -I binary -O elf64-littleriscv -B riscv $(@D)/prog.bootram $(@D)/bootrom.riscv
	$(RISCV_OBJDUMP) -D $(@D)/bootrom.riscv > $(@D)/bootrom.dump
	$(RISCV_OBJCOPY) -O verilog --verilog-data-width=8 --reverse-bytes=8 $(@D)/bootrom.riscv $(@D)/bootrom.mem
	$(RISCV_OBJCOPY) -O binary $(@D)/bootrom.riscv $(@D)/bootrom.bin
	cd $(@D); \
		python $(MEM2NBF) $(NBF_INPUTS) --checkpoint=prog.bp_regs > prog.nbf
	cd $(@D); \
		./simv $(VCS_OPTIONS) $(VCS_PLUSARGS) | tee $(SIM_LOG)
	-@grep "PASS" $(SIM_LOG) || echo "FAILED" > $(SIM_ERROR)
	-@grep "STATS" -A 3 $(SIM_LOG) > $(SIM_REPORT)

