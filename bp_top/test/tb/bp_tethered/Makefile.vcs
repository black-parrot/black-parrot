$(LINT_DIR)/testbench.v $(LINT_DIR)/wrapper.v $(LINT_DIR)/test_bp.v:
	@sed "s/BP_CFG_FLOWVAR/$(CFG)/g" $(TB_PATH)/$(TB)/$(@F) > $@

$(LINT_DIR)/flist.vcs:
	@grep -v -e "^\#" $(SYN_PATH)/flist.vcs       > $@ 
	@grep -v -e "^\#" $(TB_PATH)/$(TB)/flist.vcs >> $@ 
	@echo wrapper.v                              >> $@ 
	@echo testbench.v                            >> $@ 
	@echo test_bp.v                              >> $@ 
	@echo bp_bootrom.v							 >> $@
	@echo "$(BASEJUMP_STL_DIR)/bsg_test/bsg_nonsynth_reset_gen.v" >> $@
	@echo "$(BASEJUMP_STL_DIR)/bsg_test/bsg_nonsynth_clock_gen.v" >> $@

LINT_COLLATERAL = $(addprefix $(LINT_DIR)/, flist.vcs wrapper.v testbench.v test_bp.v)

$(BUILD_DIR)/testbench.v $(BUILD_DIR)/wrapper.v $(BUILD_DIR)/test_bp.v:
	@sed "s/BP_CFG_FLOWVAR/$(CFG)/g" $(TB_PATH)/$(TB)/$(@F) > $@

$(BUILD_DIR)/flist.vcs:
	@grep -v -e "^\#" $(SYN_PATH)/flist.vcs       > $@ 
	@grep -v -e "^\#" $(TB_PATH)/$(TB)/flist.vcs >> $@ 
	@echo wrapper.v                              >> $@ 
	@echo testbench.v                            >> $@ 
	@echo test_bp.v                              >> $@
	@echo bp_bootrom.v							 >> $@
	@echo "$(BASEJUMP_STL_DIR)/bsg_test/bsg_nonsynth_reset_gen.v" >> $@
	@echo "$(BASEJUMP_STL_DIR)/bsg_test/bsg_nonsynth_clock_gen.v" >> $@

$(BUILD_DIR)/bootrom.riscv: $(BP_TEST_MEM_DIR)/bootrom.riscv
	cp $^ $@

XXD ?= xxd
AWK ?= awk
$(BUILD_DIR)/bootrom.txt: $(BUILD_DIR)/bootrom.bin
	$(XXD) -b -c 4 $< | $(AWK) '{print $$2$$3$$4$$5}' > $@

$(BUILD_DIR)/bp_bootrom.v: $(BUILD_DIR)/bootrom.txt
	$(PYTHON) $(BASEJUMP_STL_DIR)/bsg_mem/bsg_ascii_to_rom.py $< bp_bootrom > $@

BUILD_COLLATERAL  = $(addprefix $(BUILD_DIR)/, flist.vcs wrapper.v testbench.v test_bp.v)
BUILD_COLLATERAL += $(addprefix $(BUILD_DIR)/, bootrom.riscv bootrom.bin bootrom.dump bp_bootrom.v)

$(SIM_DIR)/simv $(SIM_DIR)/simv.daidir: $(BUILD_DIR)/simv $(BUILD_DIR)/simv.daidir
	@ln -nsf $(<D)/$(@F) $@

$(SIM_DIR)/prog.riscv: $(BP_TEST_MEM_DIR)/$(SUITE)/$(PROG).riscv
	cp $^ $@

$(SIM_DIR)/prog.elf: $(BP_TEST_MEM_DIR)/$(SUITE)/$(PROG).riscv
	cp $^ $@

$(SIM_DIR)/prog.cfg: $(BP_COMMON_DIR)/test/cfg/cosim.cfg
	cp $^ $@

$(SIM_DIR)/cce_ucode.mem: $(CCE_MEM_PATH)/$(CCE_MEM)
	@cp $^ $@

$(SIM_DIR)/dram_ch.ini $(SIM_DIR)/dram_sys.ini:
	@cp $(BP_COMMON_DIR)/test/cfg/$(DRAMSIM_CH_CFG) $(@D)/dram_ch.ini
	@cp $(BP_COMMON_DIR)/test/cfg/$(DRAMSIM_SYS_CFG) $(@D)/dram_sys.ini

SIM_COLLATERAL  = $(addprefix $(SIM_DIR)/, simv simv.daidir)
SIM_COLLATERAL += $(addprefix $(SIM_DIR)/, prog.riscv prog.elf prog.mem prog.nbf prog.dump)
SIM_COLLATERAL += $(addprefix $(SIM_DIR)/, prog.cfg)
SIM_COLLATERAL += $(addprefix $(SIM_DIR)/, cce_ucode.mem)
SIM_COLLATERAL += $(addprefix $(SIM_DIR)/, dram_ch.ini dram_sys.ini)

SAMPLE_COLLATERAL  = $(addprefix $(SIM_DIR)/, simv simv.daidir)
SAMPLE_COLLATERAL += $(addprefix $(SIM_DIR)/, prog.riscv prog.elf prog.dump)
SAMPLE_COLLATERAL += $(addprefix $(SIM_DIR)/, cce_ucode.mem)
SAMPLE_COLLATERAL += $(addprefix $(SIM_DIR)/, dram_ch.ini dram_sys.ini)

sim_sample.v: build.v
sim_sample.v: $(SIM_DIR)/run_samplev
sim_sample.v: SIM_LOG    := $(LOG_DIR)/$(TB).$(CFG).$(TAG).sim.$(SUITE).$(PROG).log
sim_sample.v: SIM_REPORT := $(REPORT_DIR)/$(TB).$(CFG).$(TAG).sim.$(SUITE).$(PROG).rpt
sim_sample.v: SIM_ERROR  := $(REPORT_DIR)/$(TB).$(CFG).$(TAG).sim.$(SUITE).$(PROG).err
$(SIM_DIR)/run_samplev: $(SAMPLE_COLLATERAL)
	cd $(@D); \
		$(DROMAJO) $(@D)/prog.riscv --host --maxinsn=$(SAMPLE_START_P) --save=dromajo --memory_size=$(SAMPLE_MEMSIZE)
	mv $(@D)/dromajo.*.mainram $(@D)/prog.mainram
	mv $(@D)/dromajo.*.bootram $(@D)/prog.bootram
	mv $(@D)/dromajo.*.bp_regs $(@D)/prog.nbf
	cat $(BP_COMMON_DIR)/test/cfg/sample.cfg | envsubst > $(@D)/prog.cfg
	$(RISCV_OBJCOPY) --change-addresses 0x80000000 -I binary -O elf64-littleriscv -B riscv \
		$(@D)/prog.mainram $(@D)/prog.riscv
	$(RISCV_OBJCOPY) -O verilog $(@D)/prog.riscv $(@D)/prog.mem
	cd $(@D); \
		./simv $(VCS_OPTIONS) $(VCS_PLUSARGS) | tee $(SIM_LOG)
	-@grep "PASS" $(SIM_LOG) || echo "FAILED" > $(SIM_ERROR)
	-@grep "STATS" -A 3 $(SIM_LOG) > $(SIM_REPORT)

