// auto-generated by bsg_ascii_to_rom.py from /home/petrisko/bitbucket/bp_be/tb/asm/hello_world.bin; do not modify
//
//hello_world.elf:     file format elf64-littleriscv
//
//
//Disassembly of section .text.init:
//
//0000000080000124 <_start>:
//    80000124:	00090137          	lui	x2,0x90
//    80000128:	ffd1011b          	addiw	x2,x2,-3
//    8000012c:	00c11113          	slli	x2,x2,0xc
//    80000130:	ff010113          	addi	x2,x2,-16 # 8fff0 <_start-0x7ff70134>
//    80000134:	f14020f3          	csrrs	x1,mhartid,x0
//    80000138:	00c09093          	slli	x1,x1,0xc
//    8000013c:	40110133          	sub	x2,x2,x1
//    80000140:	00000093          	addi	x1,x0,0
//    80000144:	00000193          	addi	x3,x0,0
//    80000148:	00000213          	addi	x4,x0,0
//    8000014c:	00000293          	addi	x5,x0,0
//    80000150:	00000313          	addi	x6,x0,0
//    80000154:	00000393          	addi	x7,x0,0
//    80000158:	00000413          	addi	x8,x0,0
//    8000015c:	00000493          	addi	x9,x0,0
//    80000160:	00000513          	addi	x10,x0,0
//    80000164:	00000593          	addi	x11,x0,0
//    80000168:	00000613          	addi	x12,x0,0
//    8000016c:	00000693          	addi	x13,x0,0
//    80000170:	00000713          	addi	x14,x0,0
//    80000174:	00000793          	addi	x15,x0,0
//    80000178:	00000813          	addi	x16,x0,0
//    8000017c:	00000893          	addi	x17,x0,0
//    80000180:	00000913          	addi	x18,x0,0
//    80000184:	00000993          	addi	x19,x0,0
//    80000188:	00000a13          	addi	x20,x0,0
//    8000018c:	00000a93          	addi	x21,x0,0
//    80000190:	00000b13          	addi	x22,x0,0
//    80000194:	00000b93          	addi	x23,x0,0
//    80000198:	00000c13          	addi	x24,x0,0
//    8000019c:	00000c93          	addi	x25,x0,0
//    800001a0:	00000d13          	addi	x26,x0,0
//    800001a4:	00000d93          	addi	x27,x0,0
//    800001a8:	00000e13          	addi	x28,x0,0
//    800001ac:	00000e93          	addi	x29,x0,0
//    800001b0:	00000f13          	addi	x30,x0,0
//    800001b4:	00000f93          	addi	x31,x0,0
//    800001b8:	00c000ef          	jal	x1,800001c4 <main>
//
//00000000800001bc <loop>:
//    800001bc:	00000013          	addi	x0,x0,0
//    800001c0:	ffdff06f          	jal	x0,800001bc <loop>
//
//Disassembly of section .text:
//
//00000000800001c4 <main>:
//    800001c4:	000901b7          	lui	x3,0x90
//    800001c8:	fff1819b          	addiw	x3,x3,-1
//    800001cc:	00c19193          	slli	x3,x3,0xc
//    800001d0:	fff18193          	addi	x3,x3,-1 # 8ffff <_start-0x7ff70125>
//    800001d4:	04800113          	addi	x2,x0,72
//    800001d8:	00218023          	sb	x2,0(x3) # 80000a50 <__global_pointer$>
//    800001dc:	06500113          	addi	x2,x0,101
//    800001e0:	00218023          	sb	x2,0(x3) # 80000a50 <__global_pointer$>
//    800001e4:	06c00113          	addi	x2,x0,108
//    800001e8:	00218023          	sb	x2,0(x3) # 80000a50 <__global_pointer$>
//    800001ec:	06c00113          	addi	x2,x0,108
//    800001f0:	00218023          	sb	x2,0(x3) # 80000a50 <__global_pointer$>
//    800001f4:	06f00113          	addi	x2,x0,111
//    800001f8:	00218023          	sb	x2,0(x3) # 80000a50 <__global_pointer$>
//    800001fc:	02000113          	addi	x2,x0,32
//    80000200:	00218023          	sb	x2,0(x3) # 80000a50 <__global_pointer$>
//    80000204:	07700113          	addi	x2,x0,119
//    80000208:	00218023          	sb	x2,0(x3) # 80000a50 <__global_pointer$>
//    8000020c:	06f00113          	addi	x2,x0,111
//    80000210:	00218023          	sb	x2,0(x3) # 80000a50 <__global_pointer$>
//    80000214:	07200113          	addi	x2,x0,114
//    80000218:	00218023          	sb	x2,0(x3) # 80000a50 <__global_pointer$>
//    8000021c:	06c00113          	addi	x2,x0,108
//    80000220:	00218023          	sb	x2,0(x3) # 80000a50 <__global_pointer$>
//    80000224:	06400113          	addi	x2,x0,100
//    80000228:	00218023          	sb	x2,0(x3) # 80000a50 <__global_pointer$>
//    8000022c:	02100113          	addi	x2,x0,33
//    80000230:	00218023          	sb	x2,0(x3) # 80000a50 <__global_pointer$>
//    80000234:	00018023          	sb	x0,0(x3) # 80000a50 <__global_pointer$>
//    80000238:	00008067          	jalr	x0,0(x1)
//    8000023c:	00000013          	addi	x0,x0,0
//    80000240:	00000013          	addi	x0,x0,0
//    80000244:	00000013          	addi	x0,x0,0
//    80000248:	00000013          	addi	x0,x0,0
//    8000024c:	00000013          	addi	x0,x0,0
module bp_be_boot_rom #(parameter width_p=-1, addr_width_p=-1)
(input  [addr_width_p-1:0] addr_i
,output logic [width_p-1:0]      data_o
);
always_comb case(addr_i)
         0: data_o = width_p ' (512'bx0005000600400001003800400000000000000000000003D8000000000000004000000000800001240000000100F30002000000000000000000010102464C457F
         1: data_o = width_p ' (512'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000100101000000000000000000000000000000000000000000000000000000000010010100000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010100000000000000000000000000000001); // 0x00000000000000000000000000001000000000000000025000000000000002500000000080000000000000008000000000000000000000000000000500000001
         4: data_o = width_p ' (512'bx4011013300C09093F14020F3FF01011300C11113FFD1011B00090137000000000000000000000000000000000000000000000000000000000000000000000000
         5: data_o = width_p ' (512'b00000000000000000000100010010011000000000000000000001000000100110000000000000000000001111001001100000000000000000000011100010011000000000000000000000110100100110000000000000000000001100001001100000000000000000000010110010011000000000000000000000101000100110000000000000000000001001001001100000000000000000000010000010011000000000000000000000011100100110000000000000000000000110001001100000000000000000000001010010011000000000000000000000010000100110000000000000000000000011001001100000000000000000000000010010011); // 0x00000893000008130000079300000713000006930000061300000593000005130000049300000413000003930000031300000293000002130000019300000093
         6: data_o = width_p ' (512'b00000000000000000000000000010011000000001100000000000000111011110000000000000000000011111001001100000000000000000000111100010011000000000000000000001110100100110000000000000000000011100001001100000000000000000000110110010011000000000000000000001101000100110000000000000000000011001001001100000000000000000000110000010011000000000000000000001011100100110000000000000000000010110001001100000000000000000000101010010011000000000000000000001010000100110000000000000000000010011001001100000000000000000000100100010011); // 0x0000001300C000EF00000F9300000F1300000E9300000E1300000D9300000D1300000C9300000C1300000B9300000B1300000A9300000A130000099300000913
         7: data_o = width_p ' (512'b00000010000000000000000100010011000000000010000110000000001000110000011011110000000000010001001100000000001000011000000000100011000001101100000000000001000100110000000000100001100000000010001100000110110000000000000100010011000000000010000110000000001000110000011001010000000000010001001100000000001000011000000000100011000001001000000000000001000100111111111111110001100000011001001100000000110000011001000110010011111111111111000110000001100110110000000000001001000000011011011111111111110111111111000001101111); // 0x020001130021802306F001130021802306C001130021802306C0011300218023065001130021802304800113FFF1819300C19193FFF1819B000901B7FFDFF06F
         8: data_o = width_p ' (512'bx000000130000806700018023002180230210011300218023064001130021802306C0011300218023072001130021802306F00113002180230770011300218023
         9: data_o = width_p ' (512'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010011000000000000000000000000000100110000000000000000000000000001001100000000000000000000000000010011); // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013000000130000001300000013
   default: data_o = { width_p { 1'b0 } };
endcase
endmodule
