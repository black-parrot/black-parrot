
#############################
# global settings
#############################
SHELL := /bin/bash
EXTRAMAKEFLAGS += --warn-undefined-variables
MAKEFLAGS += $(EXTRAMAKEFLAGS)
.DEFAULT_GOAL: help

#############################
# environment detection
#############################
CENTOS7 := $(if $(findstring CentOS Linux release 7,$(shell cat /etc/centos-release 2>/dev/null)),1,0)
ARMV7 := $(if $(findstring armv7l,$(shell /usr/bin/arch)),1,0)
AARCH64 := $(if $(findstring aarch64,$(shell /usr/bin/arch)),1,0)
ARM := $(if $(ARMV7),1,$(if $(AARCH64),1,0))
UBUNTU24 := $(if $(findstring Ubuntu 24,$(shell lsb_release -a 2>/dev/null)),1,0)
NUMPROC := $(shell grep -c ^processor /proc/cpuinfo)

##########################################################
## basic tools
##########################################################
AUTORECONF ?= autoreconf
AUTOCONF   ?= autoconf
AWK        ?= awk
BASENAME   ?= basename
CAT        ?= cat
CMAKE      ?= $(if $(shell which cmake3),cmake3,cmake)
CD         ?= cd
CP         ?= cp
CURL       ?= curl
CUT        ?= cut
DIFF       ?= diff
DOCKER     ?= docker
ECHO       ?= echo
ENVSUBST   ?= envsubst
EXIT       ?= exit
FILE       ?= file
FIND       ?= find
GCC        ?= gcc
GIT        ?= git
GIT_APPLY  ?= $(GIT) apply --ignore-whitespace --ignore-space-change
GIT_CHECK  ?= $(GIT_APPLY) --check --reverse
GREP       ?= grep
MKDIR      ?= mkdir
MKDIRP     ?= mkdir -p
MV         ?= mv
PRINTF     ?= printf
PYTHON     ?= $(if $(shell which python3),python3,python)
RM         ?= rm
RMRF       ?= rm -rf
SED        ?= sed
STTY       ?= stty
STRIP      ?= strip
SYMLINK    ?= ln -nsf
TAIL       ?= tail
TAR        ?= tar
TEE        ?= tee
TEST       ?= test
TOUCH      ?= touch
TR         ?= tr
WCOUNT     ?= wc -l
WGET       ?= wget
XXD        ?= xxd

#############################
# variable templates
#############################

bsg_var_blank :=
define bsg_var_newline

$(bsg_var_blank)
endef

bsg_var_percent := %

define bsg_var_user
	$(filter-out bsg_var_%,\
		$(filter-out bsg_fn_%,\
			$(filter-out $(VARS_OLD),$(.VARIABLES)\
				)\
			)\
		)
endef

#############################
# function templates
#############################
define bsg_fn_upper
	$(eval $@_var := $(1))
	$(shell $(ECHO) $($@_var) | $(TR) a-z A-Z)
endef

define bsg_fn_lower
	$(eval $@_var := $(1))
	$(shell $(ECHO) $(1) | $(TR) A-Z a-z)
endef

define bsg_fn_mkhookdirs
	$(eval $@_hookdirs := $(1))
	$(eval $@_hookmatch := $(addsuffix /%,$($@_hookdirs)))
	$(eval $@_uservars := $(call bsg_var_user))
	$(eval $@_uppervars := $(filter $(call bsg_fn_upper,$($@_uservars)),$($@_uservars)))
	$(eval $@_uppervals := $(foreach var,$($@_uppervars),$($(var))))
	$(eval $@_filtered := $(filter $($@_hookmatch),$($@_uppervals)))
	$(shell $(MKDIRP) $($@_hookdirs) $($@_filtered))
endef

define bsg_fn_disable_submodules
	$(eval $@_submodules := $(1))
	for t in ${$@_submodules}; do \
	    d=$$($(ECHO) $$t | $(CUT) -d '@' -f 1); \
	    s=$$($(ECHO) $$t | $(CUT) -d '@' -f 2); \
	    $(ECHO) "Disabling checkout for $$d/$$s"; \
	    $(GIT) -C $$d config --local submodule.$$s.update none; \
	    $(GIT) -C $$d submodule sync --recursive; \
	done
endef

define bsg_fn_default_configure
	$(eval $@_work := $(1))
	$(eval $@_src := $(2))
	$(eval $@_prefix := $(3))
	$(eval $@_extra := $(4))
	$(eval $@_strip := -s -Wl,--gc-sections)
	$(CD) ${$@_src}; $(AUTOCONF) -o ./configure || true; \
	$(CD) ${$@_work}; \
	    CFLAGS="$(CFLAGS)" \
	    CXXFLAGS="$(CXXFLAGS)" \
	    LDFLAGS="${$@_strip} $(LDFLAGS)" \
	    ${$@_src}/configure --srcdir=${$@_src} --prefix=${$@_prefix} ${$@_extra}
endef

define bsg_fn_default_cmake
	$(eval $@_work := $(1))
	$(eval $@_src := $(2))
	$(eval $@_prefix := $(3))
	$(eval $@_extra := $(4))
	$(eval $@_strip := -s -Wl,--gc-sections)
	$(CMAKE) -B ${$@_work} -S ${$@_src} -DCMAKE_INSTALL_PREFIX=${$@_prefix} \
	    -DCMAKE_BUILD_TYPE=Release \
	    -DCMAKE_C_FLAGS="$(CFLAGS)" \
	    -DCMAKE_CXX_FLAGS="$(CXXFLAGS)" \
	    -DCMAKE_EXE_LINKER_FLAGS="${$@_strip} $(LDFLAGS)"
endef

define bsg_fn_strip_binaries
	$(eval $@_install := $(1))
	$(FIND) $($@_install) -type f -exec sh -c '\
		for file; do \
			if $(FILE) "$$file" | $(GREP) -qE "ELF (.* )?(executable|shared)"; then \
				$(STRIP) "$$file" >/dev/null 2>&1 || true; \
			fi; \
	done \
	' sh {} +
endef

define bsg_fn_info
	$(eval $@_msg = $(1))
	$(eval $@_prefix = "BSG-INFO: ")
	$(ECHO) "$($@_prefix) $($@_msg)"
endef

define bsg_fn_warn
	$(eval $@_msg = $(1))
	$(eval $@_prefix = "BSG-WARN: ")
	$(ECHO) "$($@_prefix) $($@_msg)"
endef

define bsg_fn_error
	$(eval $@_msg = $(1))
	$(eval $@_prefix = "BSG-ERROR: ")
	$(ECHO) "$($@_prefix) $($@_msg)"
endef

#############################
# target templates
#############################

define bsg_tgt_build_tag
	$(eval MAKEFLAGS := $(filter-out $(EXTRAMAKEFLAGS),$(MAKEFLAGS)))
	$(eval name := $(1))
	$(eval src_dir := $(2))
	$(eval touch_dir := $(3))
	$(eval patch_dir := $(4))
	$(eval work_dir := $(5))
	$(eval tag := $(6))
	# patch targets
	$(eval patch_tag := $(touch_dir)/$(name).patch.$(tag))
	$(eval patch_target := patch.$(name))
	$(eval repatch_target := repatch.$(name))
	# build targets
	$(eval build_tag := $(touch_dir)/$(name).build.$(tag))
	$(eval build_target := build.$(name))
	$(eval rebuild_target := rebuild.$(name))
	$(eval internal_target := $(work_dir)/$(name)/.$(name)_build)
$(patch_target): | $(patch_tag)
$(repatch_target):
	@$(RM) -f $(touch_dir)/$(name).patch.*
	@if [ -f $(src_dir)/.git ]; then \
		$(GIT) submodule deinit -f $(src_dir); \
		$(GIT) submodule init $(src_dir); \
		$(GIT) submodule update $(src_dir); \
	fi
	@+$(MAKE) $(patch_tag)
$(patch_tag):
	@$(eval patch_root := $(patch_dir)/$(if $(src_dir),$(shell $(BASENAME) $(src_dir)),$(name)))
	@$(eval patch_files := $(shell $(FIND) $(patch_root) -name "*.patch" 2>/dev/null))
	@if [ -f $(src_dir)/.git ]; then \
		$(ECHO) "Synchronizing submodules for $(name)"; \
		$(GIT) -C $(src_dir) submodule sync --recursive; \
		$(ECHO) "Checking out submodules for $(name)"; \
		$(GIT) -C $(src_dir) submodule update --init --recursive; \
	fi
	# For some reason the bash for loop doesn't work here
	@$(ECHO) "Applying patches $(patch_files)"
	@$(foreach p,$(patch_files),\
		$(GIT_APPLY) $(p) --directory $(dir $(subst $(patch_dir)/,,$(p)));\
	)
	@$(ECHO) "Checking patches $(patch_files)"
	@$(foreach p,$(patch_files),\
		$(GIT_CHECK) $(p) --directory $(dir $(subst $(patch_dir)/,,$(p)));\
	)
	@$(TOUCH) $$@
$(build_target): | $(build_tag)
$(rebuild_target):
	@$(RMRF) $(touch_dir)/$(name).build.*
	@$(RMRF)  $(work_dir)/$(name)
	@+$(MAKE) $(build_tag)
$(build_tag): | $(patch_tag)
	@$(MKDIRP) $(work_dir)/$(name)
	@+$(MAKE) $(internal_target)
	@$(TOUCH) $$@
$(internal_target): $(src_dir)
endef

define bsg_tgt_build_submodule
	$(eval name := $(1))
	$(eval src_dir := $(2))
	$(eval touch_dir := $(3))
	$(eval patch_dir := $(4))
	$(eval work_dir := $(5))
	$(eval tag := $(if $(src_dir),$(shell $(CD) $(src_dir); $(GIT) rev-parse HEAD),any))
	$(eval $(call bsg_tgt_build_tag,$(name),$(src_dir),$(touch_dir),$(patch_dir),$(work_dir),$(tag)))
endef

#############################
# Makefile targets
#############################
# Global help target
.PHONY: help
help: ## prints this message
	@$(GREP) -h '\s##\s' $(MAKEFILE_LIST) | sort \
		| $(AWK) 'BEGIN {FS = ":.*?## "}; {printf "\033[36m  %-30s\033[0m %s\n", $$1, $$2}'

# Global reset
.PHONY: bleach_all
bleach_all: ## wipes the whole repo clean. Use with caution
	@$(GIT) -C "$(git rev-parse --show-toplevel)" submodule deinit -f .
	@$(GIT) -C "$(git rev-parse --show-toplevel)" clean -ffdx

# Global checkout
.PHONY: checkout
checkout: ## checkout submodules
	@$(call bsg_fn_mkhookdirs,$(HOOK_CHECKOUT_DIRS))
	# Synchronize any pending updates
	@$(GIT) submodule sync
	@$(GIT) submodule init
	# Disable long checkouts
	@$(call bsg_fn_disable_submodules,$(HOOK_DISABLE_SUBMODULES))
	# Do the checkout
	@$(GIT) submodule update

##########################################################
## Cad environment
##########################################################

## Override CAD tool paths if needed
VCS       ?= vcs
URG       ?= urg
VERILATOR ?= verilator
DC_SHELL  ?= dc_shell
VIVADO    ?= vivado
_DVE      ?= dve
GTKWAVE   ?= gtkwave
YOSYS     ?= yosys
## Specify license path if needed
VCS_HOME        ?=
LM_LICENSE_FILE ?=

ifneq ($(MAKECMDGOALS),help)
BSG_CADENV_DIR ?= bsg_cadenv
include $(BSG_CADENV_DIR)/cadenv.mk
%/cadenv.mk:
	# BSG users leverage a machine-specific cadenv
	#   Here, we add sourcing to get these variables as well
	@$(eval export CADENV_URL := git@github.com:bespoke-silicon-group/bsg_cadenv)
	# Recursive make to include the new fragment
	@if [ -f "$(BSG_CADENV_DIR)/cadenv.mk" ]; then \
		$(ECHO) "bsg_cadenv already exists"; \
	elif [[ ! -z $$(git ls-remote --exit-code $${CADENV_URL} HEAD 2> /dev/null) ]]; then \
		$(GIT) clone --recurse-submodules $${CADENV_URL} $(@D); \
	else \
		$(ECHO) "bsg_cadenv not found"; \
		$(MKDIRP) $(@D); \
		$(TOUCH) $@; \
	fi
	@$(ECHO) "Successfully built $@!"
endif

# Saves initial values so that we can filter them later
# MUST BE BEFORE THE PROJECT VARIABLES
VARS_OLD := $(.VARIABLES)

