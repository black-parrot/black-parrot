VCS_TIMEOUT = 5ms

$(LINT_DIR)/wrapper.v $(LINT_DIR)/testbench.v $(LINT_DIR)/test_bp.v:
	@sed "s/BP_CFG_FLOWVAR/$(CFG)/g" $(TB_PATH)/$(TB)/$(@F) > $@

$(LINT_DIR)/flist.vcs:
	@grep -v -e "^\#" $(SYN_PATH)/flist.vcs       > $@
	@grep -v -e "^\#" $(TB_PATH)/$(TB)/flist.vcs >> $@
	@echo wrapper.v                              >> $@
	@echo testbench.v                            >> $@
	@echo test_bp.v                              >> $@
	@echo bsg_trace_rom_0.v                      >> $@
	@echo "$(BASEJUMP_STL_DIR)/bsg_test/bsg_nonsynth_reset_gen.v" >> $@
	@echo "$(BASEJUMP_STL_DIR)/bsg_test/bsg_nonsynth_clock_gen.v" >> $@

# TODO: NUM_INSTR_P, SEED_P, SKIP_INIT_P should be part of the rom name to help enable
#   dependency chaining / parallelism
$(LINT_DIR)/bsg_trace_rom_%.tr:
	$(PYTHON) $(TB_PATH)/$(TB)/bsg_trace_rom.py -n $(NUM_INSTR_P) -s $(SEED_P) -u $(SKIP_INIT_P) > $@

$(LINT_DIR)/bsg_trace_rom_%.v: $(LINT_DIR)/bsg_trace_rom_%.tr
	$(PYTHON) $(BASEJUMP_STL_DIR)/bsg_mem/bsg_ascii_to_rom.py $< bsg_trace_rom_$* > $@

LINT_COLLATERAL  = $(addprefix $(LINT_DIR)/, flist.vcs testbench.v wrapper.v test_bp.v)
LINT_COLLATERAL += $(addprefix $(LINT_DIR)/, bsg_trace_rom_0.v)

$(BUILD_DIR)/testbench.v $(BUILD_DIR)/wrapper.v $(BUILD_DIR)/test_bp.v:
	@sed "s/BP_CFG_FLOWVAR/$(CFG)/g" $(TB_PATH)/$(TB)/$(@F) > $@

# TODO: This target will only build for trace rom 0 at the moment
$(BUILD_DIR)/flist.vcs:
	@grep -v -e "^\#" $(SYN_PATH)/flist.vcs       > $@
	@grep -v -e "^\#" $(TB_PATH)/$(TB)/flist.vcs >> $@
	@echo wrapper.v                              >> $@
	@echo testbench.v                            >> $@
	@echo test_bp.v                              >> $@
	@echo bsg_trace_rom_0.v                      >> $@
	@echo "$(BASEJUMP_STL_DIR)/bsg_test/bsg_nonsynth_reset_gen.v" >> $@
	@echo "$(BASEJUMP_STL_DIR)/bsg_test/bsg_nonsynth_clock_gen.v" >> $@

# TODO: NUM_INSTR_P, SEED_P, SKIP_INIT_P should be part of the rom name to help enable
#   dependency chaining / parallelism
$(BUILD_DIR)/bsg_trace_rom_%.tr:
	$(PYTHON) $(TB_PATH)/$(TB)/bsg_trace_rom.py -n $(NUM_INSTR_P) -s $(SEED_P) -u $(SKIP_INIT_P) > $@

$(BUILD_DIR)/bsg_trace_rom_%.v: $(BUILD_DIR)/bsg_trace_rom_%.tr
	$(PYTHON) $(BASEJUMP_STL_DIR)/bsg_mem/bsg_ascii_to_rom.py $< bsg_trace_rom_$* > $@

BUILD_COLLATERAL  = $(addprefix $(BUILD_DIR)/, flist.vcs wrapper.v testbench.v test_bp.v)
BUILD_COLLATERAL += $(addprefix $(BUILD_DIR)/, bsg_trace_rom_0.v)

$(SIM_DIR)/simv $(SIM_DIR)/simv.daidir: $(BUILD_DIR)/simv $(BUILD_DIR)/simv.daidir
	@ln -nsf $(<D)/$(@F) $@

$(SIM_DIR)/cce_ucode.mem: $(CCE_MEM_PATH)/$(CCE_MEM)
	@cp $^ $@

SIM_COLLATERAL  = $(addprefix $(SIM_DIR)/, simv simv.daidir)
SIM_COLLATERAL += $(addprefix $(SIM_DIR)/, cce_ucode.mem)
